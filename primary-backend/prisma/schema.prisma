// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                          @id @default(uuid())
  email                           String                          @unique
  fullname                        String
  password                        String
  createdAt                       DateTime                        @default(now())
  updatedAt                       DateTime                        @updatedAt
  role                            UserRole                        @default(PARTICIPANT)
  profilePicture                  String?
  profile                         Profile?
  problem                         Problem[]                       @relation("ProblemAuthor")
  problemDiscussion               ProblemDiscussion[]
  problemDiscussionComment        ProblemDiscussionComment[]
  problemVote                     ProblemVote[]
  problemDiscussionVote           ProblemDiscussionVote[]
  problemDiscussionCommentVote    ProblemDiscussionCommentVote[]
}

enum UserRole {
  ADMIN
  PARTICIPANT
}

model Profile {
  id                 String             @id @default(uuid())
  country            String?
  gender             Gender?
  location           String?
  birthday           DateTime?
  bio                String?
  education          Education[]
  workExperience     WorkExperience[]
  skills             String[]       
  socialLinks        SocialLinks?   
  user               User               @relation(fields: [userId], references: [id])
  userId             String             @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Education {
  id                 String    @id @default(uuid())
  institute          String
  degree             String
  subject            String
  startDate          DateTime
  endDate            DateTime?
  profileId          String
  profile            Profile   @relation(fields: [profileId], references: [id])
}

model WorkExperience {
  id                 String    @id @default(uuid())
  company            String
  role               String
  location           String
  startDate          DateTime
  endDate            DateTime?
  profileId          String    
  profile            Profile   @relation(fields: [profileId], references: [id])
}

model SocialLinks {
  id                 String    @id @default(uuid())
  instagram          String?
  github             String?
  twitter            String?
  linkedin           String?
  personalWebsite    String?
  other              String?
  profileId          String    @unique
  profile            Profile   @relation(fields: [profileId], references: [id])
}

model Problem {
  id             String                @id @default(uuid())
  number         Int                   @unique @default(autoincrement())
  title          String
  description    String
  testCases      TestCase[]
  problemImages  ProblemImage[]
  author         User                  @relation("ProblemAuthor", fields: [authorId], references: [id])
  authorId       String
  companies      Company[]
  topics         Topic[]
  difficulty     Difficulty
  analytics      ProblemAnalytics?
  editorial      Editorial?
  discussions    ProblemDiscussion[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  boilerPlates   BoilerPlate[]
  problemVote    ProblemVote[]
}

model TestCase {
  id             String    @id @default(uuid())
  input          Json      
  expectedOutput Json      
  isExample      Boolean   @default(false) 
  problemId      String
  problem        Problem   @relation(fields: [problemId], references: [id])
}

model BoilerPlate {
  id             String    @id @default(uuid())
  code           String
  languageId     String    
  language       Language  @relation(fields: [languageId], references: [id])  
  problemId      String
  problem        Problem   @relation(fields: [problemId], references: [id])
}

model Language {
  id            String       @id @default(uuid())
  name          LanguageType      
  boilerPlates  BoilerPlate[]
}

enum LanguageType {
  PYTHON
  JAVA
  JAVASCRIPT
  C
  CPP
  RUBY
  GO
  SWIFT
  KOTLIN
  TYPESCRIPT
  RUST
}

model ProblemImage {
  id             String    @id @default(uuid())
  url            String
  description    String?
  problemId      String
  problem        Problem   @relation(fields: [problemId], references: [id])
}

model Company {
  id             String     @id @default(uuid())
  name           String     @unique
  problems       Problem[]  
}

model Topic {
  id             String     @id @default(uuid())
  name           String     @unique
  problems       Problem[]  
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model ProblemAnalytics {
  id                  String     @id @default(uuid())
  numberOfSubmissions Int        @default(0)
  acceptedSubmissions Int        @default(0)
  problemId           String     @unique
  problem             Problem    @relation(fields: [problemId], references: [id])
}

model Editorial {
  id             String    @id @default(uuid())
  content        String
  problemId      String    @unique
  problem        Problem   @relation(fields: [problemId], references: [id])
}

model ProblemDiscussion {
  id          String                              @id @default(uuid())
  user        User                                @relation(fields: [userId], references: [id])
  userId      String
  problem     Problem                             @relation(fields: [problemId], references: [id])
  problemId   String
  title       String
  description String                     
  comments    ProblemDiscussionComment[] 
  createdAt   DateTime                            @default(now())
  updatedAt   DateTime                            @updatedAt
  problemDiscussionVote ProblemDiscussionVote[]
}

model ProblemDiscussionComment {
  id             String                                       @id @default(uuid())
  discussion     ProblemDiscussion                            @relation(fields: [discussionId], references: [id])
  discussionId   String
  user           User                                         @relation(fields: [userId], references: [id])
  userId         String
  comment        String
  createdAt      DateTime                                     @default(now())
  updatedAt      DateTime                                     @updatedAt

  problemDiscussionCommentVote ProblemDiscussionCommentVote[]
}

model ProblemVote {
  id        String  @id @default(uuid())
  vote      Int     @default(0) // 1 for upvote, -1 for downvote, 0 for no vote
  userId    String
  problemId String
  user      User    @relation(fields: [userId], references: [id])
  problem   Problem @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId]) 
}

model ProblemDiscussionVote {
  id                  String  @id @default(uuid())
  vote                Int     @default(0) 
  userId              String
  problemDiscussionId String
  user                User    @relation(fields: [userId], references: [id])
  problemDiscussion   ProblemDiscussion @relation(fields: [problemDiscussionId], references: [id])

  @@unique([userId, problemDiscussionId]) 
}

model ProblemDiscussionCommentVote {
  id                        String  @id @default(uuid())
  vote                      Int     @default(0) 
  userId                    String
  problemDiscussionCommentId String
  user                      User    @relation(fields: [userId], references: [id])
  problemDiscussionComment  ProblemDiscussionComment @relation(fields: [problemDiscussionCommentId], references: [id])

  @@unique([userId, problemDiscussionCommentId]) 
}
